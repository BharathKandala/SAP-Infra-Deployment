---
- name: "SCSERS - Add the user '{{ sap_sid | lower }}adm' to haclient group"
  ansible.builtin.user:
    name: "{{ sap_sid | lower }}adm"
    comment: "{{ sap_sid | lower }}adm User account"
    append: yes
    groups: haclient

- name: "Configuration net.ipv4.tcp_keepalive_time"
  ansible.builtin.command: "sysctl -w net.ipv4.tcp_keepalive_time=300"
  register: sap_tcp_keepalive    

- name: "Enable saptune services"
  ansible.builtin.service:
    name: saptune
    enabled: true
    state: started
  ignore_errors: yes  

- name: "Configuration saptune NETWEAVER"
  ansible.builtin.command: "saptune solution apply NETWEAVER"
  ignore_errors: yes
  register: sap_saptune
  changed_when: sap_saptune.rc == 0  


# # To Stop the SAP servers/applications
# - name: collect instance number(s)
#   shell:
#     cmd: /usr/sap/hostctrl/exe/lssap | awk -v sid={{ sid|upper }} -F'|' '{gsub(" ","");if ($1=="{{ sid|upper }}") print $2}'
#   register: instance_nr
  
# # This task should be uncommented for debugging purposes only 
# - name: show instance number(s)
#   debug:
#     msg: "{{ instance_nr.stdout_lines }}"

# - name: show instance number(s)
#   debug:
#     msg: "{{ item }}" 
#   loop: "{{ instance_nr.stdout_lines }}"
  
# # - name: initialise empty array
# #   set_fact:
# #     instance_nr_lines: []

# # - name: create fact that will use instance_nr_lines array
# #   set_fact:
# #     instance_nr_lines: "{{ instance_nr_lines }} + [ '{{ item }}' ]"
# #   loop: "{{ instance_nr.stdout_lines }}"       


# - name: capture sapcontrol binary path
#   shell: 
#     cmd: /bin/csh -c "source /home/{{ sid|lower }}adm/.cshrc;/usr/bin/which sapcontrol"
#   become: yes
#   become_user: "{{ sid|lower }}adm"
#   register: sap_ctrl_path
  

# - name: stop SAP
#   shell:  |
#      /bin/csh -c "{{ sap_ctrl_path.stdout }} -nr {{ item }} -function StopSystem" 
#      /bin/csh -c "sleep 10"
#      /bin/csh -c "{{ sap_ctrl_path.stdout }} -nr {{ item }} -function WaitforStopped 1200 10"
#   loop: "{{ instance_nr.stdout_lines }}"
#   become: yes
#   become_user: "{{ sid|lower }}adm"
#   register: SAP_stop_result 

# # To Start the SAP servers/applications
# - name: collect instance number(s)
#   shell:
#     cmd: /usr/sap/hostctrl/exe/lssap | awk -v sid={{ sid|upper }} -F'|' '{gsub(" ","");if ($1=="{{ sid|upper }}") print $2}'
#   register: instance_nr_start

# # This task should be uncommented for debugging purposes only
# - name: show instance number(s)
#   debug:
#    msg: "{{ instance_nr_start.stdout_lines }}"

# # - name: initialise empty array
# #   set_fact:
# #     instance_nr_lines_start: []

# # - name: create fact that will use instance_nr_lines array
# #   set_fact:
# #     instance_nr_lines_start: "{{ instance_nr_lines_start }} + [ '{{ item }}' ]"
# #   loop: "{{ instance_nr_start.stdout_lines }}"


# - name: capture sapcontrol binary path 
#   shell:                 
#     cmd: /bin/csh -c "source /home/{{ sid|lower }}adm/.cshrc;/usr/bin/which sapcontrol"
#   become: yes            
#   become_user: "{{ sid|lower }}adm"
#   register: sap_ctrl_path_start 

# - name: start SAP
#   shell:  |
#      /bin/csh -c "{{ sap_ctrl_path_start.stdout }} -nr {{ item }} -function StartSystem" 
#      /bin/csh -c "sleep 10"
#      /bin/csh -c "{{ sap_ctrl_path_start.stdout }} -nr {{ item }} -function WaitforStarted 1200 10"
#   loop: "{{ instance_nr_start.stdout_lines }}"
#   become: yes
#   become_user: "{{ sid|lower }}adm"
#   register: SAP_start_result

# # This task should be uncommented for debugging purposes only
# - name: show SAP stop result
#   debug:
#    msg: "{{ SAP_start_result }}"


      


   